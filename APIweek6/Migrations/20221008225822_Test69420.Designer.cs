// <auto-generated />
using System;
using APIweek6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIweek6.Migrations
{
    [DbContext(typeof(PretparkContext))]
    [Migration("20221008225822_Test69420")]
    partial class Test69420
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("API.Models.Attractie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("buildYeaar")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("spooky")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Attractie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            buildYeaar = new DateTime(2001, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Reuzenrat",
                            spooky = 5
                        },
                        new
                        {
                            Id = 2,
                            buildYeaar = new DateTime(2005, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Splash",
                            spooky = 20
                        },
                        new
                        {
                            Id = 3,
                            buildYeaar = new DateTime(666, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Spookhuis",
                            spooky = 60
                        },
                        new
                        {
                            Id = 4,
                            buildYeaar = new DateTime(2002, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Airborne",
                            spooky = 50
                        },
                        new
                        {
                            Id = 5,
                            buildYeaar = new DateTime(1999, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Babyflug",
                            spooky = 5
                        },
                        new
                        {
                            Id = 6,
                            buildYeaar = new DateTime(1985, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Draaimolen",
                            spooky = 5
                        },
                        new
                        {
                            Id = 7,
                            buildYeaar = new DateTime(2008, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Huricane",
                            spooky = 45
                        },
                        new
                        {
                            Id = 8,
                            buildYeaar = new DateTime(2019, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Tea cups",
                            spooky = 10
                        },
                        new
                        {
                            Id = 9,
                            buildYeaar = new DateTime(2020, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Pusher",
                            spooky = 80
                        },
                        new
                        {
                            Id = 10,
                            buildYeaar = new DateTime(1996, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Rups",
                            spooky = 20
                        },
                        new
                        {
                            Id = 11,
                            buildYeaar = new DateTime(1998, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Cake Walk",
                            spooky = 0
                        },
                        new
                        {
                            Id = 12,
                            buildYeaar = new DateTime(2016, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Toxic",
                            spooky = 95
                        });
                });

            modelBuilder.Entity("APIweek6.Models.LikedAttractie", b =>
                {
                    b.Property<int>("AttractieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("AttractieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LikedAttractie");
                });

            modelBuilder.Entity("APIweek6.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9171e04d-0c10-421d-9efd-4cbbbee0eb69",
                            ConcurrencyStamp = "4cb24b93-8cbe-480a-8048-84e6e5b42df6",
                            Name = "Medewerker",
                            NormalizedName = "MEDEWERKER"
                        },
                        new
                        {
                            Id = "6c279b39-5a0e-4d52-b9c0-184c928dbc44",
                            ConcurrencyStamp = "fc4dcfe2-2bee-4dbe-bd7b-15ea9f3bfc60",
                            Name = "Gast",
                            NormalizedName = "GAST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("APIweek6.Models.LikedAttractie", b =>
                {
                    b.HasOne("API.Models.Attractie", "Attractie")
                        .WithMany("LikedAttracties")
                        .HasForeignKey("AttractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIweek6.Models.User", "User")
                        .WithMany("LikedAttracties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attractie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("APIweek6.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("APIweek6.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIweek6.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("APIweek6.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Attractie", b =>
                {
                    b.Navigation("LikedAttracties");
                });

            modelBuilder.Entity("APIweek6.Models.User", b =>
                {
                    b.Navigation("LikedAttracties");
                });
#pragma warning restore 612, 618
        }
    }
}
